2000000/(2*125000)
a = 1250
b = 200000
true = 125000
width = (b - a) / true
mean = (a+b)/2
print(mean)
print(width)
a = 50000
b = 1000000
true = 500000
width = (b - a) / true
mean = (a+b)/2
print(mean)
print(width)
a = 40000
b = 1000000
true = 500000
width = (b - a) / true
mean = (a+b)/2
print(mean)
print(width)
a = 30000
b = 1000000
true = 500000
width = (b - a) / true
mean = (a+b)/2
print(mean)
print(width)
a = 20000
b = 1000000
true = 500000
width = (b - a) / true
mean = (a+b)/2
print(mean)
print(width)
a = 10000
b = 1000000
true = 500000
width = (b - a) / true
mean = (a+b)/2
print(mean)
print(width)
a = 5000
b = 1000000
true = 500000
width = (b - a) / true
mean = (a+b)/2
print(mean)
print(width)
a = 2000
b = 1000000
true = 500000
width = (b - a) / true
mean = (a+b)/2
print(mean)
print(width)
a = 1000
b = 1000000
true = 500000
width = (b - a) / true
mean = (a+b)/2
print(mean)
print(width)
a = 100
b = 1000000
true = 500000
width = (b - a) / true
mean = (a+b)/2
print(mean)
print(width)
a = 5000
b = 1000000
true = 500000
width = (b - a) / true
mean = (a+b)/2
print(mean)
print(width)
a = 1250
b = 200000
true = 125000
width = (b - a) / true
mean = (a+b)/2
print(mean)
print(width)
a = 1250
b = 300000
true = 125000
width = (b - a) / true
mean = (a+b)/2
print(mean)
print(width)
a = 1250
b = 250000
true = 125000
width = (b - a) / true
mean = (a+b)/2
print(mean)
print(width)
a = 1000000
b = 5000000
true = 2000000
width = (b - a) / true
mean = (a+b)/2
print(mean)
print(width)
a = 1000000
b = 4000000
true = 2000000
width = (b - a) / true
mean = (a+b)/2
print(mean)
print(width)
a = 500000
b = 4000000
true = 2000000
width = (b - a) / true
mean = (a+b)/2
print(mean)
print(width)
a = 250000
b = 4000000
true = 2000000
width = (b - a) / true
mean = (a+b)/2
print(mean)
print(width)
a = 100000
b = 4000000
true = 2000000
width = (b - a) / true
mean = (a+b)/2
print(mean)
print(width)
a = 10000
b = 4000000
true = 2000000
width = (b - a) / true
mean = (a+b)/2
print(mean)
print(width)
5000/(2*125000)
1250/(2*125000)
10000/(2*125000)
1000000/(2*125000)
250000/(2*125000)
4000000/(2*125000)
1 - (2/3)**2
1 - (2/3)**2 - (1/3)**2
1 - (2/5)**2 - (3/5)**2
1 - (2/5)**2 - (3/5)**2
1 - (0/1)**2 - (1/1)**2
1 - (4/7)**2 - (3/7)**2
1 - (1/3)**2 - (2/3)**2
1 - (3/5)**2 - (2/5)**2
1 - (2/6)**2 - (4/6)**2
1 - (2/2)**2 - (0/2)**2
1 - (3/7)**2 - (4/7)**2
1 - (1/1)**2 - (0/1)**2
1 - (2/5)**2 - (3/5)**2
1 - (0/1)**2 - (1/1)**2
1 - (4/7)**2 - (3/7)**2
1 - (1/3)**2 - (2/3)**2
1 - (3/5)**2 - (2/5)**2
1 - (2/6)**2 - (4/6)**2
1 - (2/2)**2 - (0/2)**2
1 - (3/7)**2 - (4/7)**2
1 - (1/1)**2 - (0/1)**2
(3/8) * 0.5556 + (5/8) * 0.4444
(3/8) * 0.5556 + (5/8) * 0.4444
(5/8)*0.4800 + (3/8)*0.4444
gini_rain_no  <- 1 - (2/3)**2 - (1/3)**2
gini_rain_yes <- 1 - (2/5)**2 - (3/5)**2
gini_rain <- (3/8) * gini_rain_no + (5/8) * gini_rain_yes
gini_stream_no  <- 1 - (2/5)**2 - (3/5)**2
gini_stream_yes <- 1 - (2/3)**2 - (1/3)**2
gini_stream <- (5/8) * gini_stream_no + (3/8) * gini_stream_yes
gini_05_no  <- 1 - (0/1)**2 - (1/1)**2
gini_05_yes <- 1 - (4/7)**2 - (3/7)**2
gini_05 <- (1/8) * gini_05_no + (7/8) * gini_05_yes
gini_15_no  <- 1 - (1/3)**2 - (2/3)**2
gini_15_yes <- 1 - (3/5)**2 - (2/5)**2
gini_15 <- (3/8) * gini_15_no + (5/8) * gini_15_yes
gini_25_no  <- 1 - (2/6)**2 - (4/6)**2
gini_25_yes <- 1 - (2/2)**2 - (0/2)**2
gini_25 <- (6/8) * gini_25_no + (2/8) * gini_25_yes
gini_35_no  <- 1 - (3/7)**2 - (4/7)**2
gini_35_yes <- 1 - (1/1)**2 - (0/1)**2
gini_35 <- (7/8) * gini_25_no + (1/8) * gini_35_yes
gini_rain
gini_stream_no  <- 1 - (2/5)**2 - (3/5)**2
gini_stream_yes <- 1 - (2/3)**2 - (1/3)**2
gini_stream <- (5/8) * gini_stream_no + (3/8) * gini_stream_yes
gini_05_no  <- 1 - (0/1)**2 - (1/1)**2
gini_05_yes <- 1 - (4/7)**2 - (3/7)**2
gini_05 <- (1/8) * gini_05_no + (7/8) * gini_05_yes
gini_15_no  <- 1 - (1/3)**2 - (2/3)**2
gini_15_yes <- 1 - (3/5)**2 - (2/5)**2
gini_15 <- (3/8) * gini_15_no + (5/8) * gini_15_yes
gini_25_no  <- 1 - (2/6)**2 - (4/6)**2
gini_25_yes <- 1 - (2/2)**2 - (0/2)**2
gini_25 <- (6/8) * gini_25_no + (2/8) * gini_25_yes
gini_35_no  <- 1 - (3/7)**2 - (4/7)**2
gini_35_yes <- 1 - (1/1)**2 - (0/1)**2
gini_35 <- (7/8) * gini_25_no + (1/8) * gini_35_yes
gini_stream
gini_05_no  <- 1 - (0/1)**2 - (1/1)**2
gini_05_yes <- 1 - (4/7)**2 - (3/7)**2
gini_05 <- (1/8) * gini_05_no + (7/8) * gini_05_yes
gini_15_no  <- 1 - (1/3)**2 - (2/3)**2
gini_15_yes <- 1 - (3/5)**2 - (2/5)**2
gini_15 <- (3/8) * gini_15_no + (5/8) * gini_15_yes
gini_25_no  <- 1 - (2/6)**2 - (4/6)**2
gini_25_yes <- 1 - (2/2)**2 - (0/2)**2
gini_25 <- (6/8) * gini_25_no + (2/8) * gini_25_yes
gini_35_no  <- 1 - (3/7)**2 - (4/7)**2
gini_35_yes <- 1 - (1/1)**2 - (0/1)**2
gini_35 <- (7/8) * gini_25_no + (1/8) * gini_35_yes
gini_05
gini_15
gini_25
gini_35
gini_rain_no  <- 1 - (1/4)**2 - (3/4)**2
gini_rain_yes <- 1 - (3/4)**2 - (1/4)**2
gini_rain <- (4/8) * gini_rain_no + (4/8) * gini_rain_yes
gini_rain
gini_3_no  <- 1 - (3/7)**2 - (4/7)**2
gini_3_yes <- 1 - (1/1)**2 - (0/1)**2
gini_3 <- (7/8) * gini_3_no + (1/8) * gini_3_yes
gini_3
gini_rain_no
1-1**2-0**2
1-.5**2-.5**2
1-(1/3)**2-(2/3)**2
(1-(1/3)**2-(2/3)**2) * 0.75 + 0*0.25
step = 10
max_steps = 50
mu_0= 0.04
lr = 0.04
momentum = 0.9
alpha = 0.0002
p = step / max_steps
mu_0 / (1+alpha * p)**beta
beta = 0.75
p = step / max_steps
mu_0 / (1+alpha * p)**beta
step = 20
max_steps = 50
mu_0= 0.04
lr = 0.04
mu_0 / (1+alpha * p)**beta
p = step / max_steps
mu_0 / (1+alpha * p)**beta
alpha = 0.002
beta = 0.75
p = step / max_steps
mu_0 / (1+alpha * p)**beta
alpha = 0.02
p = step / max_steps
mu_0 / (1+alpha * p)**beta
beta = 0.7
p = step / max_steps
mu_0 / (1+alpha * p)**beta
step = 50
max_steps = 50
mu_0= 0.04
lr = 0.04
momentum = 0.9
alpha = 0.02
beta = 0.7
p = step / max_steps
mu_0 / (1+alpha * p)**beta
alpha = 0.002
mu_0 / (1+alpha * p)**beta
alpha =2
beta = 0.7
p = step / max_steps
mu_0 / (1+alpha * p)**beta
step = 1
p = step / max_steps
mu_0 / (1+alpha * p)**beta
step = 50
p = step / max_steps
mu_0 / (1+alpha * p)**beta
plot(andersonifolio_lhoods)
andersonifolio_lhoods <- c(16.1218629402508, 2.70555350486893, 0.000412914029014597, 0.000138409532160773)
plot(andersonifolio_lhoods)
line(andersonifolio_lhoods)
index_af <- c(0, 1, 2, 3)
df_af <- cbind(andersonifolio_lhoods, index_af)
names(df_af)
df_af <- data.frame(andersonifolio_lhoods, index_af)
names(df_af) <- c('Lhood', 'H')
plot(df_af$Lhood~df_af$H)
line(df_af$Lhood~df_af$H)
abline(df_af$Lhood~df_af$H)
lines(df_af$Lhood~df_af$H)
lines(df_af$Lhood~df_af$H, col="blue")
lines(df_af$Lhood~df_af$H, col="blue", xlab="score", ylab="h")
plot(df_af$Lhood~df_af$H, xlab="score", ylab="h")
lines(df_af$Lhood~df_af$H, col="blue")
all_lhoods <- c(486.782971550745,113.104800165058, 54.5496074779407, 38.9160584963594, 28.8641003092133)
all_lhoods <- c(486.782971550745,113.104800165058, 54.5496074779407, 38.9160584963594, 28.8641003092133)
index_all <- c(0, 1, 2, 3, 4)
df_all <- data.frame(all_lhoods, index_all)
names(df_all) <- c('Lhood', 'H')
plot(df_all$Lhood~df_af$H, xlab="score", ylab="h")
all_lhoods <- c(486.782971550745,113.104800165058, 54.5496074779407, 38.9160584963594, 28.8641003092133)
index_all <- c(0, 1, 2, 3, 4)
df_all <- data.frame(all_lhoods, index_all)
names(df_all) <- c('Lhood', 'H')
plot(df_all$Lhood~df_all$H, xlab="score", ylab="h")
lines(df_all$Lhood~df_all$H, col="blue")
all_lhoods <- c(486.782971550745,113.104800165058, 54.5496074779407, 38.9160584963594, 28.8641003092133)
index_all <- c(0, 1, 2, 3, 4)
df_all <- data.frame(all_lhoods, index_all)
names(df_all) <- c('Lhood', 'H')
andersonifolio_lhoods <- c(16.1218629402508, 2.70555350486893, 0.000412914029014597, 0.000138409532160773)
index_af <- c(0, 1, 2, 3)
df_af <- data.frame(andersonifolio_lhoods, index_af)
names(df_af) <- c('Lhood', 'H')
plot(df_af$Lhood~df_af$H, xlab="h", ylab="score")
lines(df_af$Lhood~df_af$H, col="blue")
plot(df_all$Lhood~df_all$H, xlab="h", ylab="score")
lines(df_all$Lhood~df_all$H, col="blue")
all_lhoods <- c(10.2193052818375,4.93766973959841, 0.000439805019291022, 0.000184347139650852)
index_all <- c(0, 1, 2, 3)
df_all <- data.frame(all_lhoods, index_all)
names(df_all) <- c('Lhood', 'H')
andersonifolio_lhoods <- c(152.530745840038, 132.161381411998, 92.9337989182295, 82.9661739379226)
index_af <- c(0, 1, 2, 3)
df_af <- data.frame(andersonifolio_lhoods, index_af)
names(df_af) <- c('Lhood', 'H')
plot(df_af$Lhood~df_af$H, xlab="h", ylab="score")
lines(df_af$Lhood~df_af$H, col="blue")
plot(df_all$Lhood~df_all$H, xlab="h", ylab="score")
lines(df_all$Lhood~df_all$H, col="blue")
R.home
R.home()
1*1250*0.5
#tutorial: https://github.com/meganlsmith/delimitR/blob/master/fullmanual_v2.md#the-traits-file
library(delimitR)
?fastsimcoalsims
?setup_fsc2
setwd('~/Documents/BIO_4990_6990_MachineLearning/computational_activities/linear_regression/')
trait_data <- read.csv('Acar_morph_data_M_final.csv')
envir_data <- read.csv('climate_data.csv')
head(trait_data)
head(envir_data)
# remove 'oldSVL' from trait data
trait_data <- trait_data[,-c(trait_data$oldSVL)]
trait_data <- read.csv('Acar_morph_data_M_final.csv')
# remove 'oldSVL' from trait data
trait_data <- trait_data[,-c('oldSVL')]
# remove 'oldSVL' from trait data
trait_data = subset(trait_data, select = -c('oldSVL') )
# remove 'oldSVL' from trait data
trait_data = subset(trait_data, select = -c(oldSVL) )
# check whether 'City' and 'Locality' columns match
table(trait_data$Locality)
table(envir_data$City)
table(envir_data$State)
table(envir_data$Site)
# check whether 'City' and 'Site' columns match
table(trait_data$City)
# check whether 'City' and 'Site' columns match
table(trait_data$Site)
table(envir_data$City)
# join the dataframes
trait_data$join_col <- trait_data$Site
envir_data$join_col <- envir_data$City
merged_data <- merge(trait_data, environ_data, by = "join_col")
merged_data <- merge(trait_data, envir_data, by = "join_col")
merged_data = subset(merged_data, select = -c(join_col) )
# save new file
write.csv(merged_data, 'all.csv')
# test lm
results_metacarpal_annualtemp <- lm(merged_data$Metacarpal~merged_data$Annual.Mean.Temp)
results_metacarpal_annualtemp
summary(results_metacarpal_annualtemp)
merged_data$Metacarpal<- log(merged_data$Metacarpal)
results_metacarpal_annualtemp <- lm(merged_data$Metacarpal~merged_data$Annual.Mean.Temp)
summary(results_metacarpal_annualtemp)
# log tranform
logmorph = log(trait_data[,4:30])
logmorph = cbind(morph[,1:3], logmorph)
# log tranform
logmorph = log(trait_data[,4:30])
logmorph = cbind(morph[,1:3], logmorph)
logmorph$join_col <- logmorph$Site
envir_data$join_col <- envir_data$City
logmorph = cbind(trait_data[,1:3], logmorph)
logmorph$join_col <- logmorph$Site
envir_data$join_col <- envir_data$City
merged_data <- merge(logmorph, envir_data, by = "join_col")
merged_data = subset(merged_data, select = -c(join_col) )
setwd('~/Documents/BIO_4990_6990_MachineLearning/computational_activities/linear_regression/')
# load packages
library(ggplot2)
library(ggsubplot)
library(plyr)
library(mapproj)
library(maps)
library(reshape)
library(stringr)
library(ICC)
library(MODISTools)
library(MCMCglmm)
library(gridExtra)
library(RColorBrewer)
# load packages
library(ggplot2)
library(ggsubplot)
library(plyr)
library(plyr)
library(mapproj)
library(maps)
library(reshape)
library(stringr)
#colors for multiclass plots
# from http://stackoverflow.com/questions/9563711/r-color-palettes-for-many-data-classes
c25=c("dodgerblue2","#E31A1C","green4","#6A3D9A","#FF7F00","black",
"gold1","skyblue2","#FB9A99","palegreen2","#CAB2D6","#FDBF6F",
"gray70","khaki2","maroon","orchid1","deeppink1","blue1",
"steelblue4","darkturquoise","green1","yellow4","yellow3","darkorange4", "brown")
# read in raw data
morph <- read.csv("Acar_morph_data_M_final.csv", header = TRUE)
# remove shoulder width and front parietal measurement
morph <- cbind(morph[,1:13], morph[,15:21], morph[,23:length(morph)])
# change SVL to mm to match other data
morph$Snout.Vent.Length = morph$Snout.Vent.Length*10
# remove miami individs
morph = morph[morph$Site != "Miami",]
# extract mean and sd for each trait
means = c()
sds = c()
for (i in 4:30){
means = cbind(means, mean(morph[,i]))
sds = cbind(sds, sd(morph[,i]))}
as.character(sds)
as.character(means)
# log transform data
logmorph = log(morph[,4:30])
logmorph = cbind(morph[,1:3], logmorph)
names(logmorph)[1] = "Observation.Number"
# Figure 4ab - snout vent length and exemplar traits
line1 = coef(lm(Femur ~ Snout.Vent.Length, data = logmorph))
f = ggplot(data=logmorph,aes(x = Snout.Vent.Length, y=Femur, color=Site)) +
geom_point(size=4) + geom_abline(intercept = line1[1], slope=line1[2], color='black') +
scale_color_manual(values=c25) + theme(axis.text = element_text(size=13),
axis.title = element_text(size=14), legend.text=element_text(size=12),
legend.title = element_text(size=12)) + xlab("Snout Vent Length (ln mm)") +
ylab("Femur Length (ln mm)")
line2 = coef(lm(Braincase.Width ~ Snout.Vent.Length, data = logmorph))
b = ggplot(data=logmorph,aes(x = Snout.Vent.Length, y=Braincase.Width, color=Site)) +
geom_point(size=4) + geom_abline(intercept = line2[1], slope=line2[2], color='black') +
scale_color_manual(values=c25) + theme(axis.text = element_text(size=13),
axis.title = element_text(size=14), legend.text=element_text(size=12),
legend.title = element_text(size=12)) + xlab("Snout Vent Length (ln mm)") +
ylab("Braincase Width (ln mm)")
grid.arrange(f,b, ncol=1)
#Create full morphological distance matrix from raw data
male_morph=resids
names(male_morph)[2] = "population"
# add in mass data
mass = read.csv("mass_data.csv")
#Create full morphological distance matrix from raw data
male_morph=resids
names(male_morph)[2] = "population"
# calculate residuals
resids = logmorph
for (i in 4:29){
resids[i] = resid(lm(resids[,i] ~ resids$Snout.Vent.Length))
}
#write.csv(resids, "Acar_log_resids_XXX.csv")
#Create full morphological distance matrix from raw data
male_morph=resids
names(male_morph)[2] = "population"
# add in mass data
mass = read.csv("mass_data.csv")
# trim mass data
mass = mass[1:201,]
# change ID to match morph
mass$Observation.Number = as.factor(paste("A",mass$ID,sep=''))
# subselect data
mass = mass[, 5:6]
male_morph = join(male_morph, mass)
# FIGURE 5 - plot residuals by trait
res = cbind(male_morph$population, male_morph[,4:29])
resid.melt= melt(res, id=c("male_morph$population"))
names(resid.melt)[1] = "Population"
ggplot(data=resid.melt, aes(x=Population, y=value)) + geom_boxplot() + geom_point(size=1) +
theme(legend.position = "none") + facet_wrap(~ variable, scale="free_y", ncol=7) +
theme(axis.text.x = element_text(size=9, angle = 90, hjust = 1, vjust=0.4),
strip.text = element_text(size=11), axis.title = element_text(size=13)) +
ylab("Residual Trait Value")
## run principal componenent analysis on full data
male_morph_pc <- prcomp(male_morph[,4:29], scale=T)
summary(male_morph_pc)
# examine loadings
full.pc = male_morph_pc$rotation
sort(full.pc[,1])
as.character(round(full.pc[,1], 3))
# aggregate by population
pop_pca_means<-aggregate(male_morph_pc$x ~ male_morph$population, data=male_morph_pc$x, mean)
# use all pc's in generation of distance matrix
male_full_morph_matrix <- dist(pop_pca_means[,2:length(pop_pca_means)], method = "euclidean", diag = TRUE, upper = TRUE)
full.pc
## run principal componenent analysis on full data
male_morph_pc <- prcomp(male_morph[,4:29], scale=T)
summary(male_morph_pc)
male_morph_pc
